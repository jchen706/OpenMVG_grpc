// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: masterworker.proto

#include "masterworker.pb.h"
#include "masterworker.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace masterworker {

static const char* RpcImage_method_names[] = {
  "/masterworker.RpcImage/SendImage",
  "/masterworker.RpcImage/SendServerStream",
  "/masterworker.RpcImage/SendClientStream",
};

std::unique_ptr< RpcImage::Stub> RpcImage::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RpcImage::Stub> stub(new RpcImage::Stub(channel));
  return stub;
}

RpcImage::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SendImage_(RpcImage_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_SendServerStream_(RpcImage_method_names[1], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_SendClientStream_(RpcImage_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::masterworker::ImageRequest, ::masterworker::ImageResponse>* RpcImage::Stub::SendImageRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::masterworker::ImageRequest, ::masterworker::ImageResponse>::Create(channel_.get(), rpcmethod_SendImage_, context);
}

void RpcImage::Stub::experimental_async::SendImage(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::masterworker::ImageRequest,::masterworker::ImageResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::masterworker::ImageRequest,::masterworker::ImageResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SendImage_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::masterworker::ImageRequest, ::masterworker::ImageResponse>* RpcImage::Stub::AsyncSendImageRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::masterworker::ImageRequest, ::masterworker::ImageResponse>::Create(channel_.get(), cq, rpcmethod_SendImage_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::masterworker::ImageRequest, ::masterworker::ImageResponse>* RpcImage::Stub::PrepareAsyncSendImageRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::masterworker::ImageRequest, ::masterworker::ImageResponse>::Create(channel_.get(), cq, rpcmethod_SendImage_, context, false, nullptr);
}

::grpc::ClientWriter< ::masterworker::FileChunk>* RpcImage::Stub::SendServerStreamRaw(::grpc::ClientContext* context, ::masterworker::UploadStatus* response) {
  return ::grpc::internal::ClientWriterFactory< ::masterworker::FileChunk>::Create(channel_.get(), rpcmethod_SendServerStream_, context, response);
}

void RpcImage::Stub::experimental_async::SendServerStream(::grpc::ClientContext* context, ::masterworker::UploadStatus* response, ::grpc::experimental::ClientWriteReactor< ::masterworker::FileChunk>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::masterworker::FileChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_SendServerStream_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::masterworker::FileChunk>* RpcImage::Stub::AsyncSendServerStreamRaw(::grpc::ClientContext* context, ::masterworker::UploadStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::masterworker::FileChunk>::Create(channel_.get(), cq, rpcmethod_SendServerStream_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::masterworker::FileChunk>* RpcImage::Stub::PrepareAsyncSendServerStreamRaw(::grpc::ClientContext* context, ::masterworker::UploadStatus* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::masterworker::FileChunk>::Create(channel_.get(), cq, rpcmethod_SendServerStream_, context, response, false, nullptr);
}

::grpc::ClientReader< ::masterworker::ImageResponse>* RpcImage::Stub::SendClientStreamRaw(::grpc::ClientContext* context, const ::masterworker::ImageRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::masterworker::ImageResponse>::Create(channel_.get(), rpcmethod_SendClientStream_, context, request);
}

void RpcImage::Stub::experimental_async::SendClientStream(::grpc::ClientContext* context, ::masterworker::ImageRequest* request, ::grpc::experimental::ClientReadReactor< ::masterworker::ImageResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::masterworker::ImageResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SendClientStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::masterworker::ImageResponse>* RpcImage::Stub::AsyncSendClientStreamRaw(::grpc::ClientContext* context, const ::masterworker::ImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::masterworker::ImageResponse>::Create(channel_.get(), cq, rpcmethod_SendClientStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::masterworker::ImageResponse>* RpcImage::Stub::PrepareAsyncSendClientStreamRaw(::grpc::ClientContext* context, const ::masterworker::ImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::masterworker::ImageResponse>::Create(channel_.get(), cq, rpcmethod_SendClientStream_, context, request, false, nullptr);
}

RpcImage::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RpcImage_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< RpcImage::Service, ::masterworker::ImageRequest, ::masterworker::ImageResponse>(
          [](RpcImage::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::masterworker::ImageResponse,
             ::masterworker::ImageRequest>* stream) {
               return service->SendImage(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RpcImage_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< RpcImage::Service, ::masterworker::FileChunk, ::masterworker::UploadStatus>(
          [](RpcImage::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::masterworker::FileChunk>* reader,
             ::masterworker::UploadStatus* resp) {
               return service->SendServerStream(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RpcImage_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RpcImage::Service, ::masterworker::ImageRequest, ::masterworker::ImageResponse>(
          [](RpcImage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::masterworker::ImageRequest* req,
             ::grpc::ServerWriter<::masterworker::ImageResponse>* writer) {
               return service->SendClientStream(ctx, req, writer);
             }, this)));
}

RpcImage::Service::~Service() {
}

::grpc::Status RpcImage::Service::SendImage(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::masterworker::ImageResponse, ::masterworker::ImageRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RpcImage::Service::SendServerStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::masterworker::FileChunk>* reader, ::masterworker::UploadStatus* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RpcImage::Service::SendClientStream(::grpc::ServerContext* context, const ::masterworker::ImageRequest* request, ::grpc::ServerWriter< ::masterworker::ImageResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace masterworker

