// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: masterworker.proto
#ifndef GRPC_masterworker_2eproto__INCLUDED
#define GRPC_masterworker_2eproto__INCLUDED

#include "masterworker.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace masterworker {

class RpcImage final {
 public:
  static constexpr char const* service_full_name() {
    return "masterworker.RpcImage";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::masterworker::ImageRequest, ::masterworker::ImageResponse>> SendImage(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::masterworker::ImageRequest, ::masterworker::ImageResponse>>(SendImageRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::masterworker::ImageRequest, ::masterworker::ImageResponse>> AsyncSendImage(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::masterworker::ImageRequest, ::masterworker::ImageResponse>>(AsyncSendImageRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::masterworker::ImageRequest, ::masterworker::ImageResponse>> PrepareAsyncSendImage(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::masterworker::ImageRequest, ::masterworker::ImageResponse>>(PrepareAsyncSendImageRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::masterworker::FileChunk>> SendServerStream(::grpc::ClientContext* context, ::masterworker::UploadStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::masterworker::FileChunk>>(SendServerStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::masterworker::FileChunk>> AsyncSendServerStream(::grpc::ClientContext* context, ::masterworker::UploadStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::masterworker::FileChunk>>(AsyncSendServerStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::masterworker::FileChunk>> PrepareAsyncSendServerStream(::grpc::ClientContext* context, ::masterworker::UploadStatus* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::masterworker::FileChunk>>(PrepareAsyncSendServerStreamRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::masterworker::ImageResponse>> SendClientStream(::grpc::ClientContext* context, const ::masterworker::ImageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::masterworker::ImageResponse>>(SendClientStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::masterworker::ImageResponse>> AsyncSendClientStream(::grpc::ClientContext* context, const ::masterworker::ImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::masterworker::ImageResponse>>(AsyncSendClientStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::masterworker::ImageResponse>> PrepareAsyncSendClientStream(::grpc::ClientContext* context, const ::masterworker::ImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::masterworker::ImageResponse>>(PrepareAsyncSendClientStreamRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendImage(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::masterworker::ImageRequest,::masterworker::ImageResponse>* reactor) = 0;
      #else
      virtual void SendImage(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::masterworker::ImageRequest,::masterworker::ImageResponse>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendServerStream(::grpc::ClientContext* context, ::masterworker::UploadStatus* response, ::grpc::ClientWriteReactor< ::masterworker::FileChunk>* reactor) = 0;
      #else
      virtual void SendServerStream(::grpc::ClientContext* context, ::masterworker::UploadStatus* response, ::grpc::experimental::ClientWriteReactor< ::masterworker::FileChunk>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendClientStream(::grpc::ClientContext* context, ::masterworker::ImageRequest* request, ::grpc::ClientReadReactor< ::masterworker::ImageResponse>* reactor) = 0;
      #else
      virtual void SendClientStream(::grpc::ClientContext* context, ::masterworker::ImageRequest* request, ::grpc::experimental::ClientReadReactor< ::masterworker::ImageResponse>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::masterworker::ImageRequest, ::masterworker::ImageResponse>* SendImageRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::masterworker::ImageRequest, ::masterworker::ImageResponse>* AsyncSendImageRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::masterworker::ImageRequest, ::masterworker::ImageResponse>* PrepareAsyncSendImageRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::masterworker::FileChunk>* SendServerStreamRaw(::grpc::ClientContext* context, ::masterworker::UploadStatus* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::masterworker::FileChunk>* AsyncSendServerStreamRaw(::grpc::ClientContext* context, ::masterworker::UploadStatus* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::masterworker::FileChunk>* PrepareAsyncSendServerStreamRaw(::grpc::ClientContext* context, ::masterworker::UploadStatus* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::masterworker::ImageResponse>* SendClientStreamRaw(::grpc::ClientContext* context, const ::masterworker::ImageRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::masterworker::ImageResponse>* AsyncSendClientStreamRaw(::grpc::ClientContext* context, const ::masterworker::ImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::masterworker::ImageResponse>* PrepareAsyncSendClientStreamRaw(::grpc::ClientContext* context, const ::masterworker::ImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReaderWriter< ::masterworker::ImageRequest, ::masterworker::ImageResponse>> SendImage(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::masterworker::ImageRequest, ::masterworker::ImageResponse>>(SendImageRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::masterworker::ImageRequest, ::masterworker::ImageResponse>> AsyncSendImage(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::masterworker::ImageRequest, ::masterworker::ImageResponse>>(AsyncSendImageRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::masterworker::ImageRequest, ::masterworker::ImageResponse>> PrepareAsyncSendImage(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::masterworker::ImageRequest, ::masterworker::ImageResponse>>(PrepareAsyncSendImageRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::masterworker::FileChunk>> SendServerStream(::grpc::ClientContext* context, ::masterworker::UploadStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::masterworker::FileChunk>>(SendServerStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::masterworker::FileChunk>> AsyncSendServerStream(::grpc::ClientContext* context, ::masterworker::UploadStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::masterworker::FileChunk>>(AsyncSendServerStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::masterworker::FileChunk>> PrepareAsyncSendServerStream(::grpc::ClientContext* context, ::masterworker::UploadStatus* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::masterworker::FileChunk>>(PrepareAsyncSendServerStreamRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::masterworker::ImageResponse>> SendClientStream(::grpc::ClientContext* context, const ::masterworker::ImageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::masterworker::ImageResponse>>(SendClientStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::masterworker::ImageResponse>> AsyncSendClientStream(::grpc::ClientContext* context, const ::masterworker::ImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::masterworker::ImageResponse>>(AsyncSendClientStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::masterworker::ImageResponse>> PrepareAsyncSendClientStream(::grpc::ClientContext* context, const ::masterworker::ImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::masterworker::ImageResponse>>(PrepareAsyncSendClientStreamRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendImage(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::masterworker::ImageRequest,::masterworker::ImageResponse>* reactor) override;
      #else
      void SendImage(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::masterworker::ImageRequest,::masterworker::ImageResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendServerStream(::grpc::ClientContext* context, ::masterworker::UploadStatus* response, ::grpc::ClientWriteReactor< ::masterworker::FileChunk>* reactor) override;
      #else
      void SendServerStream(::grpc::ClientContext* context, ::masterworker::UploadStatus* response, ::grpc::experimental::ClientWriteReactor< ::masterworker::FileChunk>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendClientStream(::grpc::ClientContext* context, ::masterworker::ImageRequest* request, ::grpc::ClientReadReactor< ::masterworker::ImageResponse>* reactor) override;
      #else
      void SendClientStream(::grpc::ClientContext* context, ::masterworker::ImageRequest* request, ::grpc::experimental::ClientReadReactor< ::masterworker::ImageResponse>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReaderWriter< ::masterworker::ImageRequest, ::masterworker::ImageResponse>* SendImageRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::masterworker::ImageRequest, ::masterworker::ImageResponse>* AsyncSendImageRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::masterworker::ImageRequest, ::masterworker::ImageResponse>* PrepareAsyncSendImageRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::masterworker::FileChunk>* SendServerStreamRaw(::grpc::ClientContext* context, ::masterworker::UploadStatus* response) override;
    ::grpc::ClientAsyncWriter< ::masterworker::FileChunk>* AsyncSendServerStreamRaw(::grpc::ClientContext* context, ::masterworker::UploadStatus* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::masterworker::FileChunk>* PrepareAsyncSendServerStreamRaw(::grpc::ClientContext* context, ::masterworker::UploadStatus* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::masterworker::ImageResponse>* SendClientStreamRaw(::grpc::ClientContext* context, const ::masterworker::ImageRequest& request) override;
    ::grpc::ClientAsyncReader< ::masterworker::ImageResponse>* AsyncSendClientStreamRaw(::grpc::ClientContext* context, const ::masterworker::ImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::masterworker::ImageResponse>* PrepareAsyncSendClientStreamRaw(::grpc::ClientContext* context, const ::masterworker::ImageRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendImage_;
    const ::grpc::internal::RpcMethod rpcmethod_SendServerStream_;
    const ::grpc::internal::RpcMethod rpcmethod_SendClientStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SendImage(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::masterworker::ImageResponse, ::masterworker::ImageRequest>* stream);
    virtual ::grpc::Status SendServerStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::masterworker::FileChunk>* reader, ::masterworker::UploadStatus* response);
    virtual ::grpc::Status SendClientStream(::grpc::ServerContext* context, const ::masterworker::ImageRequest* request, ::grpc::ServerWriter< ::masterworker::ImageResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendImage() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::masterworker::ImageResponse, ::masterworker::ImageRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendImage(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::masterworker::ImageResponse, ::masterworker::ImageRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendServerStream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendServerStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::masterworker::FileChunk>* /*reader*/, ::masterworker::UploadStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendServerStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::masterworker::UploadStatus, ::masterworker::FileChunk>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendClientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendClientStream() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SendClientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendClientStream(::grpc::ServerContext* /*context*/, const ::masterworker::ImageRequest* /*request*/, ::grpc::ServerWriter< ::masterworker::ImageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendClientStream(::grpc::ServerContext* context, ::masterworker::ImageRequest* request, ::grpc::ServerAsyncWriter< ::masterworker::ImageResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendImage<WithAsyncMethod_SendServerStream<WithAsyncMethod_SendClientStream<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::masterworker::ImageRequest, ::masterworker::ImageResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->SendImage(context); }));
    }
    ~ExperimentalWithCallbackMethod_SendImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::masterworker::ImageResponse, ::masterworker::ImageRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::masterworker::ImageRequest, ::masterworker::ImageResponse>* SendImage(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::masterworker::ImageRequest, ::masterworker::ImageResponse>* SendImage(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendServerStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::masterworker::FileChunk, ::masterworker::UploadStatus>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::masterworker::UploadStatus* response) { return this->SendServerStream(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_SendServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendServerStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::masterworker::FileChunk>* /*reader*/, ::masterworker::UploadStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::masterworker::FileChunk>* SendServerStream(
      ::grpc::CallbackServerContext* /*context*/, ::masterworker::UploadStatus* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::masterworker::FileChunk>* SendServerStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::masterworker::UploadStatus* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendClientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendClientStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::masterworker::ImageRequest, ::masterworker::ImageResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::masterworker::ImageRequest* request) { return this->SendClientStream(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_SendClientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendClientStream(::grpc::ServerContext* /*context*/, const ::masterworker::ImageRequest* /*request*/, ::grpc::ServerWriter< ::masterworker::ImageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::masterworker::ImageResponse>* SendClientStream(
      ::grpc::CallbackServerContext* /*context*/, const ::masterworker::ImageRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::masterworker::ImageResponse>* SendClientStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::masterworker::ImageRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_SendImage<ExperimentalWithCallbackMethod_SendServerStream<ExperimentalWithCallbackMethod_SendClientStream<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_SendImage<ExperimentalWithCallbackMethod_SendServerStream<ExperimentalWithCallbackMethod_SendClientStream<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SendImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendImage() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::masterworker::ImageResponse, ::masterworker::ImageRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendServerStream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendServerStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::masterworker::FileChunk>* /*reader*/, ::masterworker::UploadStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendClientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendClientStream() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SendClientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendClientStream(::grpc::ServerContext* /*context*/, const ::masterworker::ImageRequest* /*request*/, ::grpc::ServerWriter< ::masterworker::ImageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendImage() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::masterworker::ImageResponse, ::masterworker::ImageRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendImage(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendServerStream() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SendServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendServerStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::masterworker::FileChunk>* /*reader*/, ::masterworker::UploadStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendServerStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendClientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendClientStream() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SendClientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendClientStream(::grpc::ServerContext* /*context*/, const ::masterworker::ImageRequest* /*request*/, ::grpc::ServerWriter< ::masterworker::ImageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendClientStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->SendImage(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::masterworker::ImageResponse, ::masterworker::ImageRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SendImage(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SendImage(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendServerStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->SendServerStream(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendServerStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::masterworker::FileChunk>* /*reader*/, ::masterworker::UploadStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* SendServerStream(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* SendServerStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendClientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendClientStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->SendClientStream(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendClientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendClientStream(::grpc::ServerContext* /*context*/, const ::masterworker::ImageRequest* /*request*/, ::grpc::ServerWriter< ::masterworker::ImageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SendClientStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* SendClientStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SendClientStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SendClientStream() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::masterworker::ImageRequest, ::masterworker::ImageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::masterworker::ImageRequest, ::masterworker::ImageResponse>* streamer) {
                       return this->StreamedSendClientStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SendClientStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendClientStream(::grpc::ServerContext* /*context*/, const ::masterworker::ImageRequest* /*request*/, ::grpc::ServerWriter< ::masterworker::ImageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSendClientStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::masterworker::ImageRequest,::masterworker::ImageResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SendClientStream<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_SendClientStream<Service > StreamedService;
};

}  // namespace masterworker


#endif  // GRPC_masterworker_2eproto__INCLUDED
